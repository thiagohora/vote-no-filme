<?xml version="1.0" encoding="utf-8"?>
<!--

   DO NOT ALTER OR REMOVE COPYRIGHT NOTICE OR THIS HEADER.

   Copyright 2006, 2007 Sun Microsystems, Inc. All rights reserved.
   Use is subject to license terms.

   The contents of this file are subject to the terms of the Common Development
   and Distribution License("CDDL") (the "License"). You may not use this file
   except in compliance with the License.

   You can obtain a copy of the License at https://openinstaller.dev.java.net/license.html
   or http://openinstaller.dev.java.net/license.txt . See the License for the
   specific language governing permissions and limitations under the License.

   When distributing the Covered Code, include this CDDL Header Notice in each
   file and include the License file at http://openinstaller.dev.java.net/license.txt .
   If applicable, add the following below this CDDL Header, with the fields
   enclosed by brackets [] replaced by your own identifying information:
   "Portions Copyrighted [year] [name of copyright owner]"

   ident "@(#)%Name% %Revision% %Date% SMI"

-->
<oor:component-schema oor:version="1.1" oor:name="ReadyToUninstall" oor:package="org.openinstaller.readytouninstall"
    xsi:schemaLocation="http://openoffice.org/2001/registry"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:oor="http://openoffice.org/2001/registry"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xml:lang='en-US'>
  <component>
    <group oor:name="readytouninstall">
      <prop oor:name="ONLOAD" oor:type="xs:string" oor:nillable="false">
        <value>foovalueforuninstall</value>
        <actions>
          <onSet><![CDATA[
            import org.openinstaller.provider.dependency.DependencyControl;
            import org.openinstaller.contracts.product.ProductNodeInterface;
            import org.openinstaller.provider.sims.SIMSControl;
            import org.openinstaller.provider.conf.ConfigHelper;
            import org.openinstaller.bus.BusRequest;
            import org.openinstaller.sims.SystemProduct;
            import org.openinstaller.bus.BusResponse;
            import org.openinstaller.bus.ControlBus;
            import org.openinstaller.provider.operation.Operation;
            import org.openinstaller.provider.operation.ProductMap;
            import org.openinstaller.provider.operation.Operation.OPTYPE;
            import org.openinstaller.provider.operation.OpsControl;
            import org.openinstaller.provider.operation.OpsProvider;
            import org.openinstaller.provider.operation.OperationImpossibleException;
            import org.openinstaller.provider.operation.Operation.OPTYPE;
            import org.openinstaller.provider.sims.SIMSControl.SIMSCommand;
            import org.openinstaller.provider.dependency.DependencyProvider;
            import org.openinstaller.provider.dependency.MediaProduct;
            import org.openinstaller.util.install.Common;
            import org.openinstaller.core.PROCESSING_MODE;

            import java.util.List;
            import java.util.ArrayList;
            import java.util.Set;
            import java.util.HashSet;

            public static java.util.List gOperations = null;

            run(){
              if (ConfigHelper.hasUnconfirmedValue("InstallHome.directory.INSTALL_HOME")) {
                /*
                 * confirm the install home, which sets the SIMS domain and alternate root properly
                 * so that all operations take place w/r/t that root.
                 */
                ConfigHelper.setValue("InstallHome.directory.INSTALL_HOME", ConfigHelper.getUnconfirmedValue("InstallHome.directory.INSTALL_HOME"));
              }
              BusRequest prodReq = new BusRequest("ConfigRequest",
                  new EngineConfigCommand(EngineConfigCommand.COMMAND.GET_CONFIG, EngineConfigItem.DEFAULT_PRODUCT_ID));
              BusResponse prodResp = bus.publishRequest(prodReq, "svc://general/EngineConfig");
              String prodInst = (String)prodResp.getResult();
              DependencyControl theDC = new DependencyControl(DependencyControl.COMMAND.GET_PRODUCT_NODE_ROOT, null);
              BusResponse theBR = bus.publishRequest(new BusRequest("DependencyRequest", theDC), "svc://general/Dependency");
              ProductNodeInterface thePNI = (ProductNodeInterface) theBR.getResult();
              SystemProduct theSysProd = null;
              if (thePNI != null) {
                SIMSControl theSIMSCntrl = new SIMSControl(SIMSCommand.GET_PRODUCT_BY_NAME, prodInst);
                theBR = bus.publishRequest(new BusRequest("SIMSRequest", theSIMSCntrl), "svc://general/sims");
                theSysProd = (SystemProduct) theBR.getResult();
              }

              Set theSysProds = new HashSet();
              theSysProds.add(theSysProd);
              MediaProduct theHybrid = (MediaProduct)thePNI;
              /* get processing mode (install or uninstall) */
              String theMode = Common.getProcessingMode();
              Operation.OPTYPE theOp;
              if (theMode.equals(PROCESSING_MODE.INSTALL.name()) || theMode.equals(PROCESSING_MODE.REMOVE.name())) {
                theOp = Enum.valueOf(Operation.OPTYPE.class, theMode);
              } else {
                throw new EnhancedException("UNEXPECTED_PROCESSING_MODE", "mode=" + theMode);
              }

              ProductMap theProdMap = new ProductMap(theSysProds, theHybrid, theOp, Platform.getCurrentPlatform());
              OpsControl theOpsCtrl = new OpsControl(OpsControl.OpsCommand.PERFORM, theProdMap);
              theBR = bus.publishRequest(new BusRequest("OperationRequest", theOpsCtrl), "svc://general/operation");
              gOperations = (java.util.List ) theBR.getResult();
              ((BusResponse)Scripting.getInterpreter().get("gSharedResponse")).setMore(false);
            }

            return (Runnable)this;
          ]]></onSet>
        </actions>
      </prop>

    </group>
  </component>
</oor:component-schema>
